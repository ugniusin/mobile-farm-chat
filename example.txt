package main

import (
	"context"
	//"fmt"
	"log"
	"net/http"

	"github.com/graphql-go/graphql"
	"golang.org/x/net/websocket"
)

func main() {
	// Create a GraphQL schema
	rootQuery := graphql.ObjectConfig{Name: "RootQuery", Fields: graphql.Fields{}}
	rootMutation := graphql.ObjectConfig{Name: "RootMutation", Fields: graphql.Fields{}}
	rootSubscription := graphql.ObjectConfig{Name: "RootSubscription", Fields: graphql.Fields{
		"counter": &graphql.Field{
			Type: graphql.Int,
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				return p.Context.Value("counter"), nil
			},
			Subscribe: func(p graphql.ResolveParams) (interface{}, error) {
				return p.Context.Value("counter"), nil
			},
		},
	}}
	schemaConfig := graphql.SchemaConfig{Query: graphql.NewObject(rootQuery), Mutation: graphql.NewObject(rootMutation), Subscription: graphql.NewObject(rootSubscription)}
	schema, err := graphql.NewSchema(schemaConfig)
	if err != nil {
		log.Fatalf("failed to create schema, error: %v", err)
	}

	// WebSocket handler function
	websocketHandler := func(ws *websocket.Conn) {
		// Create a context for this connection
		ctx := context.WithValue(context.Background(), "counter", 0)

		// Subscribe to the GraphQL subscription
		params := graphql.Params{Schema: schema, Context: ctx}
		subscription, err := graphql.Subscribe(params)
		if err != nil {
			log.Fatalf("failed to subscribe, error: %v", err)
		}

		// Loop over the subscription and write results to the WebSocket
		for {
			result := <-subscription.Channel()
			err = websocket.JSON.Send(ws, result)
			if err != nil {
				log.Printf("failed to send subscription result, error: %v", err)
				break
			}
		}
	}

	// WebSocket server
	http.Handle("/graphql", websocket.Handler(websocketHandler))
	log.Println("WebSocket server started at :8080/graphql")
	err = http.ListenAndServe(":8080", nil)
	if err != nil {
		log.Fatalf("failed to start server, error: %v", err)
	}
}
